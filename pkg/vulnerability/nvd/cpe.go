package nvd

import "strings"

// cpeMatchesPackage checks if a CPE string matches the package name
func cpeMatchesPackage(cpe, packageName string) bool {
	// CPE format: cpe:2.3:a:vendor:product:version:update:edition:language:sw_edition:target_sw:target_hw:other
	parts := strings.Split(cpe, ":")
	if len(parts) < 5 {
		return false
	}

	product := parts[4]

	// Normalize names for comparison
	normalizedProduct := strings.ToLower(strings.ReplaceAll(product, "_", "-"))
	normalizedPackage := strings.ToLower(strings.ReplaceAll(packageName, "_", "-"))

	// More precise matching - exact match or product contains package name as whole word
	matches := normalizedProduct == normalizedPackage ||
		(strings.Contains(normalizedProduct, normalizedPackage) &&
			len(normalizedPackage) > 3 && // Avoid very short matches
			!strings.Contains(normalizedProduct, normalizedPackage+"_") && // Avoid partial word matches
			!strings.Contains(normalizedProduct, normalizedPackage+"-"))

	// Additional check for development packages
	if !matches && (strings.HasSuffix(normalizedPackage, "-dev") || strings.HasSuffix(normalizedPackage, "-devel")) {
		basePackage := strings.TrimSuffix(strings.TrimSuffix(normalizedPackage, "-dev"), "-devel")
		matches = normalizedProduct == basePackage
	}

	return matches
}
