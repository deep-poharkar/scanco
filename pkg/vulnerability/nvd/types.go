package nvd

import (
	"strings"
	"time"
)

// NVDTime is a custom time type that handles NVD API timestamp format
type NVDTime struct {
	time.Time
}

// UnmarshalJSON implements json.Unmarshaler
func (t *NVDTime) UnmarshalJSON(data []byte) error {
	str := strings.Trim(string(data), "\"")
	if str == "null" || str == "" {
		return nil
	}

	// Try parsing with timezone first
	parsed, err := time.Parse(time.RFC3339Nano, str)
	if err == nil {
		t.Time = parsed
		return nil
	}

	// If that fails, try without timezone (assume UTC)
	parsed, err = time.Parse("2006-01-02T15:04:05.999", str)
	if err != nil {
		return err
	}
	t.Time = parsed.UTC()
	return nil
}

// Config holds NVD API configuration
type Config struct {
	APIKey     string        // NVD API key for authentication
	BaseURL    string        // NVD API base URL
	UserAgent  string        // User agent for API requests
	RateLimit  time.Duration // Minimum time between requests
	MaxRetries int           // Maximum number of retries for failed requests
}

// DefaultConfig returns default NVD API configuration
func DefaultConfig() *Config {
	return &Config{
		BaseURL:    "https://services.nvd.nist.gov/rest/json/cves/2.0",
		UserAgent:  "scanco/1.0",
		RateLimit:  time.Second * 6, // NVD rate limit is 10 requests per minute
		MaxRetries: 3,
	}
}

// CVEResponse represents the NVD API response structure
type CVEResponse struct {
	ResultsPerPage  int                 `json:"resultsPerPage"`
	StartIndex      int                 `json:"startIndex"`
	TotalResults    int                 `json:"totalResults"`
	Format          string              `json:"format"`
	Version         string              `json:"version"`
	Timestamp       NVDTime             `json:"timestamp"`
	Vulnerabilities []VulnerabilityItem `json:"vulnerabilities"`
}

// VulnerabilityItem represents a single vulnerability in the NVD response
type VulnerabilityItem struct {
	Cve CVE `json:"cve"`
}

// CVE represents a CVE record from NVD
type CVE struct {
	ID             string          `json:"id"`
	SourceID       string          `json:"sourceIdentifier"`
	Published      NVDTime         `json:"published"`
	LastModified   NVDTime         `json:"lastModified"`
	VulnStatus     string          `json:"vulnStatus"`
	Descriptions   []Description   `json:"descriptions"`
	Metrics        Metrics         `json:"metrics"`
	References     []Reference     `json:"references"`
	Configurations []Configuration `json:"configurations"`
}

// Description represents a CVE description
type Description struct {
	Lang  string `json:"lang"`
	Value string `json:"value"`
}

// Metrics contains CVSS score information
type Metrics struct {
	CVSSMetricV31 []struct {
		Source   string  `json:"source"`
		Type     string  `json:"type"`
		Score    float64 `json:"cvssData>baseScore"`
		Severity string  `json:"baseSeverity"`
	} `json:"cvssMetricV31"`
	CVSSMetricV30 []struct {
		Source   string  `json:"source"`
		Type     string  `json:"type"`
		Score    float64 `json:"cvssData>baseScore"`
		Severity string  `json:"baseSeverity"`
	} `json:"cvssMetricV30"`
	CVSSMetricV2 []struct {
		Source   string  `json:"source"`
		Type     string  `json:"type"`
		Score    float64 `json:"cvssData>baseScore"`
		Severity string  `json:"baseSeverity"`
	} `json:"cvssMetricV2"`
}

// Reference represents a CVE reference
type Reference struct {
	URL    string   `json:"url"`
	Source string   `json:"source"`
	Tags   []string `json:"tags"`
}

// Configuration represents affected products/versions
type Configuration struct {
	Nodes []Node `json:"nodes"`
}

// Node represents a configuration node
type Node struct {
	Operator string     `json:"operator"`
	Negate   bool       `json:"negate"`
	CPEMatch []CPEMatch `json:"cpeMatch"`
}

// CPEMatch represents a CPE match condition
type CPEMatch struct {
	Vulnerable            bool   `json:"vulnerable"`
	Criteria              string `json:"criteria"`
	VersionStartIncluding string `json:"versionStartIncluding,omitempty"`
	VersionStartExcluding string `json:"versionStartExcluding,omitempty"`
	VersionEndIncluding   string `json:"versionEndIncluding,omitempty"`
	VersionEndExcluding   string `json:"versionEndExcluding,omitempty"`
}
