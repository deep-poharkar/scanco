package version

import (
	"fmt"
	"strings"

	"github.com/hashicorp/go-version"
)

// Matcher implements version matching for different package formats
type Matcher struct {
	ecosystem string // "apk", "apt", etc.
}

// NewMatcher creates a new version matcher for the given ecosystem
func NewMatcher(ecosystem string) *Matcher {
	return &Matcher{
		ecosystem: ecosystem,
	}
}

// IsAffected checks if a version is affected by a vulnerability
func (m *Matcher) IsAffected(pkgVersion, constraint string) (bool, error) {
	// Parse the package version
	ver, err := m.ParseVersion(pkgVersion)
	if err != nil {
		return false, fmt.Errorf("parsing package version: %w", err)
	}

	// Parse version constraints
	constraints, err := m.parseConstraints(constraint)
	if err != nil {
		return false, fmt.Errorf("parsing version constraints: %w", err)
	}

	// Check if version matches any constraint
	for _, c := range constraints {
		if c.Check(ver) {
			return true, nil
		}
	}

	return false, nil
}

// ParseVersion parses a version string into a comparable format
func (m *Matcher) ParseVersion(v string) (*version.Version, error) {
	// Handle ecosystem-specific version formats
	switch m.ecosystem {
	case "apk":
		// APK versions can have additional info after version like p0, r1
		// Strip these for comparison
		v = strings.Split(v, "-")[0]
	case "apt":
		// APT versions can have epoch (1:2.3.4)
		// For now, just take the version part
		parts := strings.Split(v, ":")
		if len(parts) > 1 {
			v = parts[1]
		}
	}

	// Parse version using hashicorp/go-version
	return version.NewVersion(v)
}

// parseConstraints parses version constraints into a list of constraints
func (m *Matcher) parseConstraints(constraint string) (version.Constraints, error) {
	// Handle different formats based on ecosystem
	switch m.ecosystem {
	case "apk":
		return version.NewConstraint(constraint)
	case "apt":
		// Convert Debian version constraints to hashicorp format
		// (>= 1.2.3) -> ">= 1.2.3"
		constraint = strings.Trim(constraint, "()")
		return version.NewConstraint(constraint)
	default:
		return version.NewConstraint(constraint)
	}
}
