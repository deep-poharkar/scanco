package vulnerability

import (
	"time"

	"scanco/pkg/scanner"
)

// Severity represents the severity level of a vulnerability
type Severity string

const (
	SeverityCritical Severity = "CRITICAL"
	SeverityHigh     Severity = "HIGH"
	SeverityMedium   Severity = "MEDIUM"
	SeverityLow      Severity = "LOW"
	SeverityNone     Severity = "NONE"
)

// ScanOptions represents options for vulnerability scanning
type ScanOptions struct {
	MinSeverity Severity
	PageSize    int  // Number of results per page
	PageNumber  int  // Page number (1-based)
	QuickScan   bool // If true, return first page of results quickly
}

// DefaultScanOptions returns default scan options
func DefaultScanOptions() *ScanOptions {
	return &ScanOptions{
		MinSeverity: SeverityLow,
		PageSize:    5,
		PageNumber:  1,
		QuickScan:   true,
	}
}

// ScanResult represents the result of a vulnerability scan
type ScanResult struct {
	Results      []VulnerabilityResult
	TotalResults int  // Total number of vulnerabilities found
	CurrentPage  int  // Current page number
	HasMorePages bool // Whether there are more pages of results
	PackagesLeft int  // Number of packages left to scan
	QuickScan    bool // Whether this was a quick scan
}

// Vulnerability represents a security vulnerability
type Vulnerability struct {
	ID          string    // CVE ID or similar
	Title       string    // Short description
	Description string    // Detailed description
	Severity    Severity  // Severity level
	CVSS        float64   // CVSS score
	Published   time.Time // Publication date
	Updated     time.Time // Last update date
	References  []string  // URLs to references
}

// AffectedPackage represents a package affected by a vulnerability
type AffectedPackage struct {
	Name            string   // Package name
	VersionRange    string   // Affected version range
	FixedVersions   []string // Versions that fix this vulnerability
	EcosystemName   string   // e.g., "alpine", "debian"
	EcosystemPrefix string   // e.g., "apk", "deb"
}

// VulnerabilityScanner defines methods for scanning vulnerabilities
type VulnerabilityScanner interface {
	// ScanPackages scans a list of packages for known vulnerabilities
	ScanPackages(packages []scanner.Package, options *ScanOptions) (*ScanResult, error)
}

// VulnerabilityResult represents a vulnerability found in a package
type VulnerabilityResult struct {
	Package       scanner.Package // The affected package
	Vulnerability Vulnerability   // The vulnerability details
	FixedIn       []string        // Versions that fix this vulnerability
}

// VulnerabilitySource defines methods for fetching vulnerability data
type VulnerabilitySource interface {
	// GetVulnerabilities fetches vulnerabilities for a package
	GetVulnerabilities(pkg scanner.Package, options *ScanOptions) ([]Vulnerability, error)
	// Name returns the source name (e.g., "NVD", "OSV")
	Name() string
}

// VersionMatcher defines methods for version comparison
type VersionMatcher interface {
	// IsAffected checks if a version is affected by a vulnerability
	IsAffected(version, constraint string) (bool, error)
	// ParseVersion parses a version string into a comparable format
	ParseVersion(version string) (interface{}, error)
}
